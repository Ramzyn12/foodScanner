const fs = require('fs');
const path = require('path');

// Path to the additives.js file
const outputFilePath = path.join(__dirname, '../../constants/additives.js');

// Read the file asynchronously
fs.readFile(path.join(__dirname, 'additives.txt'), 'utf8', (err, data) => {
  if (err) {
    console.error('Error reading file:', err);
    return;
  }

  // Process the data
  const additivesObject = processAdditivesData(data);

  // Convert the object to a formatted JSON string
  const objectString = JSON.stringify(additivesObject, null, 2);

  // Format the output for the additives.js file
  const outputContent = `// This file is autogenerated from insertAdditives.js\n\nconst additives = ${objectString};\n\nexport default additives;`;

  // Write the content to additives.js
  fs.writeFile(outputFilePath, outputContent, (err) => {
    if (err) {
      console.error('Error writing file:', err);
      return;
    }
    console.log('additives.js has been updated successfully.');
  });
});

// Function to process the additives data
function processAdditivesData(data) {
  // Split the data into lines
  const lines = data.split('\n').map(line => line.trim());

  const additives = {};
  let currentCode = '';

  lines.forEach(line => {
    if (line) {
      // Match the code and name
      const codeMatch = line.match(/^([A-Z0-9]+(?:i|-?[a-z]+)?) - (.+):$/);
      if (codeMatch) {
        // Start of a new additive
        currentCode = codeMatch[1];
        const description = codeMatch[2];
        additives[currentCode] = '';
      } else if (currentCode) {
        // Continuation of the current additive's description
        additives[currentCode] += line + ' ';
      }
    }
  });

  // Trim any extra spaces from descriptions
  for (const code in additives) {
    additives[code] = additives[code].trim();
  }

  return additives;
}
